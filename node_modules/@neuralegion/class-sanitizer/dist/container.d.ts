/**
 * Container options.
 */
export interface UseContainerOptions {
    /**
     * If set to true, then default container will be used in the case if given container haven't returned anything.
     */
    fallback?: boolean;
    /**
     * If set to true, then default container will be used in the case if given container thrown an exception.
     */
    fallbackOnErrors?: boolean;
}
/**
 * Type or class.
 */
export declare type Type<T = any> = (new (...args: unknown[]) => T) | Function;
/**
 * Container.
 */
export interface Container {
    get<T>(someClass: Type<T>): T;
}
/**
 * Sets container to be used by this library.
 */
export declare const useContainer: (iocContainer: Container, options?: UseContainerOptions | undefined) => void;
/**
 * Gets the IOC container used by this library.
 */
export declare const getFromContainer: <T>(someClass: Type<T>) => T;
